# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_id: str=None, title: str=None, description: str=None, meeting_time: str=None, meeting_location: str=None, status: str=None, semester: str=None):  # noqa: E501
        """ModelClass - a model defined in Swagger

        :param class_id: The class_id of this ModelClass.  # noqa: E501
        :type class_id: str
        :param title: The title of this ModelClass.  # noqa: E501
        :type title: str
        :param description: The description of this ModelClass.  # noqa: E501
        :type description: str
        :param meeting_time: The meeting_time of this ModelClass.  # noqa: E501
        :type meeting_time: str
        :param meeting_location: The meeting_location of this ModelClass.  # noqa: E501
        :type meeting_location: str
        :param status: The status of this ModelClass.  # noqa: E501
        :type status: str
        :param semester: The semester of this ModelClass.  # noqa: E501
        :type semester: str
        """
        self.swagger_types = {
            'class_id': str,
            'title': str,
            'description': str,
            'meeting_time': str,
            'meeting_location': str,
            'status': str,
            'semester': str
        }

        self.attribute_map = {
            'class_id': 'classId',
            'title': 'title',
            'description': 'description',
            'meeting_time': 'meetingTime',
            'meeting_location': 'meetingLocation',
            'status': 'status',
            'semester': 'semester'
        }
        self._class_id = class_id
        self._title = title
        self._description = description
        self._meeting_time = meeting_time
        self._meeting_location = meeting_location
        self._status = status
        self._semester = semester

    @classmethod
    def from_dict(cls, dikt) -> 'ModelClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Class of this ModelClass.  # noqa: E501
        :rtype: ModelClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_id(self) -> str:
        """Gets the class_id of this ModelClass.


        :return: The class_id of this ModelClass.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id: str):
        """Sets the class_id of this ModelClass.


        :param class_id: The class_id of this ModelClass.
        :type class_id: str
        """

        self._class_id = class_id

    @property
    def title(self) -> str:
        """Gets the title of this ModelClass.


        :return: The title of this ModelClass.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ModelClass.


        :param title: The title of this ModelClass.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this ModelClass.


        :return: The description of this ModelClass.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ModelClass.


        :param description: The description of this ModelClass.
        :type description: str
        """

        self._description = description

    @property
    def meeting_time(self) -> str:
        """Gets the meeting_time of this ModelClass.


        :return: The meeting_time of this ModelClass.
        :rtype: str
        """
        return self._meeting_time

    @meeting_time.setter
    def meeting_time(self, meeting_time: str):
        """Sets the meeting_time of this ModelClass.


        :param meeting_time: The meeting_time of this ModelClass.
        :type meeting_time: str
        """

        self._meeting_time = meeting_time

    @property
    def meeting_location(self) -> str:
        """Gets the meeting_location of this ModelClass.


        :return: The meeting_location of this ModelClass.
        :rtype: str
        """
        return self._meeting_location

    @meeting_location.setter
    def meeting_location(self, meeting_location: str):
        """Sets the meeting_location of this ModelClass.


        :param meeting_location: The meeting_location of this ModelClass.
        :type meeting_location: str
        """

        self._meeting_location = meeting_location

    @property
    def status(self) -> str:
        """Gets the status of this ModelClass.


        :return: The status of this ModelClass.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ModelClass.


        :param status: The status of this ModelClass.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def semester(self) -> str:
        """Gets the semester of this ModelClass.


        :return: The semester of this ModelClass.
        :rtype: str
        """
        return self._semester

    @semester.setter
    def semester(self, semester: str):
        """Sets the semester of this ModelClass.


        :param semester: The semester of this ModelClass.
        :type semester: str
        """
        allowed_values = ["fall2022", "spring2023", "summer2023"]  # noqa: E501
        if semester not in allowed_values:
            raise ValueError(
                "Invalid value for `semester` ({0}), must be one of {1}"
                .format(semester, allowed_values)
            )

        self._semester = semester
