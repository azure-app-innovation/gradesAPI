# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, assignment_id: str=None, class_id: str=None, _date: datetime=None, weight: int=None):  # noqa: E501
        """Assignment - a model defined in Swagger

        :param assignment_id: The assignment_id of this Assignment.  # noqa: E501
        :type assignment_id: str
        :param class_id: The class_id of this Assignment.  # noqa: E501
        :type class_id: str
        :param _date: The _date of this Assignment.  # noqa: E501
        :type _date: datetime
        :param weight: The weight of this Assignment.  # noqa: E501
        :type weight: int
        """
        self.swagger_types = {
            'assignment_id': str,
            'class_id': str,
            '_date': datetime,
            'weight': int
        }

        self.attribute_map = {
            'assignment_id': 'assignmentId',
            'class_id': 'classId',
            '_date': 'date',
            'weight': 'weight'
        }
        self._assignment_id = assignment_id
        self._class_id = class_id
        self.__date = _date
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Assignment of this Assignment.  # noqa: E501
        :rtype: Assignment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment_id(self) -> str:
        """Gets the assignment_id of this Assignment.


        :return: The assignment_id of this Assignment.
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id: str):
        """Sets the assignment_id of this Assignment.


        :param assignment_id: The assignment_id of this Assignment.
        :type assignment_id: str
        """

        self._assignment_id = assignment_id

    @property
    def class_id(self) -> str:
        """Gets the class_id of this Assignment.


        :return: The class_id of this Assignment.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id: str):
        """Sets the class_id of this Assignment.


        :param class_id: The class_id of this Assignment.
        :type class_id: str
        """

        self._class_id = class_id

    @property
    def _date(self) -> datetime:
        """Gets the _date of this Assignment.


        :return: The _date of this Assignment.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this Assignment.


        :param _date: The _date of this Assignment.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def weight(self) -> int:
        """Gets the weight of this Assignment.


        :return: The weight of this Assignment.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """Sets the weight of this Assignment.


        :param weight: The weight of this Assignment.
        :type weight: int
        """

        self._weight = weight
